// <auto-generated />
using System;
using LibraryData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryData.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryData.Models.BranchHours", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchID");

                    b.Property<int>("CloseTime");

                    b.Property<int>("DayOfWork");

                    b.Property<int>("OpenTime");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("branchHours");
                });

            modelBuilder.Entity("LibraryData.Models.Chechout", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LibraryAssetID");

                    b.Property<int?>("LibraryCardID");

                    b.Property<DateTime>("Since");

                    b.Property<DateTime>("Until");

                    b.HasKey("ID");

                    b.HasIndex("LibraryAssetID");

                    b.HasIndex("LibraryCardID");

                    b.ToTable("chechouts");
                });

            modelBuilder.Entity("LibraryData.Models.CheckoutHistry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Checkin");

                    b.Property<DateTime>("Checkout");

                    b.Property<int?>("LibraryAssetID");

                    b.Property<int?>("LibraryCardID");

                    b.HasKey("ID");

                    b.HasIndex("LibraryAssetID");

                    b.HasIndex("LibraryCardID");

                    b.ToTable("checkoutHistries");
                });

            modelBuilder.Entity("LibraryData.Models.Hold", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("HoldPlace");

                    b.Property<int?>("LibraryAssetID");

                    b.Property<int?>("LibraryCardID");

                    b.HasKey("ID");

                    b.HasIndex("LibraryAssetID");

                    b.HasIndex("LibraryCardID");

                    b.ToTable("holds");
                });

            modelBuilder.Entity("LibraryData.Models.LibraryAsset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImgUrl");

                    b.Property<int?>("LocationID");

                    b.Property<int>("NumberOfCopies");

                    b.Property<int?>("StatusID");

                    b.Property<string>("Titel");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("StatusID");

                    b.ToTable("libraryAssets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LibraryAsset");
                });

            modelBuilder.Entity("LibraryData.Models.LibraryBranch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("Telephone");

                    b.HasKey("ID");

                    b.ToTable("libraryBranches");
                });

            modelBuilder.Entity("LibraryData.Models.LibraryCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Fees");

                    b.HasKey("ID");

                    b.ToTable("libraryCards");
                });

            modelBuilder.Entity("LibraryData.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("LibraryData.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("LibraryBranchID");

                    b.Property<string>("TelephoneNumber");

                    b.Property<int?>("UserNLibraryCardameID");

                    b.HasKey("ID");

                    b.HasIndex("LibraryBranchID");

                    b.HasIndex("UserNLibraryCardameID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LibraryData.Models.Book", b =>
                {
                    b.HasBaseType("LibraryData.Models.LibraryAsset");

                    b.Property<string>("Author");

                    b.Property<string>("ISBN");

                    b.Property<string>("Index");

                    b.ToTable("Book");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("LibraryData.Models.Media", b =>
                {
                    b.HasBaseType("LibraryData.Models.LibraryAsset");

                    b.Property<string>("Director");

                    b.ToTable("Media");

                    b.HasDiscriminator().HasValue("Media");
                });

            modelBuilder.Entity("LibraryData.Models.BranchHours", b =>
                {
                    b.HasOne("LibraryData.Models.LibraryBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("LibraryData.Models.Chechout", b =>
                {
                    b.HasOne("LibraryData.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetID");

                    b.HasOne("LibraryData.Models.LibraryCard", "LibraryCard")
                        .WithMany("Chechouts")
                        .HasForeignKey("LibraryCardID");
                });

            modelBuilder.Entity("LibraryData.Models.CheckoutHistry", b =>
                {
                    b.HasOne("LibraryData.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetID");

                    b.HasOne("LibraryData.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardID");
                });

            modelBuilder.Entity("LibraryData.Models.Hold", b =>
                {
                    b.HasOne("LibraryData.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetID");

                    b.HasOne("LibraryData.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardID");
                });

            modelBuilder.Entity("LibraryData.Models.LibraryAsset", b =>
                {
                    b.HasOne("LibraryData.Models.LibraryBranch", "Location")
                        .WithMany("LibraryAssets")
                        .HasForeignKey("LocationID");

                    b.HasOne("LibraryData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID");
                });

            modelBuilder.Entity("LibraryData.Models.User", b =>
                {
                    b.HasOne("LibraryData.Models.LibraryBranch", "LibraryBranch")
                        .WithMany("Users")
                        .HasForeignKey("LibraryBranchID");

                    b.HasOne("LibraryData.Models.LibraryCard", "UserNLibraryCardame")
                        .WithMany()
                        .HasForeignKey("UserNLibraryCardameID");
                });
#pragma warning restore 612, 618
        }
    }
}
